// Define direction constants
#define JOYSTICK_CENTER 0
#define JOYSTICK_UP 1
#define JOYSTICK_DOWN 2
#define JOYSTICK_LEFT 3
#define JOYSTICK_RIGHT 4

// ADC channels for joystick X and Y axes
#define ADC_CHANNEL_X ADC_CHANNEL_0
#define ADC_CHANNEL_Y ADC_CHANNEL_1

// Differential voltage thresholds
#define X_THRESHOLD 1000  // Adjust this value based on your joystick
#define Y_THRESHOLD 1000  // Adjust this value based on your joystick

// Initialize ADC configuration for differential mode
static void MX_ADC1_Init(void)
{
  // ... (Your existing ADC initialization code)
  hadc1.Init.DifferentialMode = ADC_DIFFERENTIAL_ENDED; // Enable differential mode
  // ...
}

// Inside the main loop:
while (1)
{
  HAL_ADC_Start(&hadc1);
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
  xValue = HAL_ADC_GetValue(&hadc1);

  HAL_ADC_Start(&hadc1);
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
  yValue = HAL_ADC_GetValue(&hadc1);

  // Calculate the difference between xValue and yValue to determine direction
  int16_t xDiff = xValue - 2047; // Assuming 12-bit ADC, midpoint at 2047
  int16_t yDiff = yValue - 2047;

  if (xDiff < -X_THRESHOLD)
  {
      direction = JOYSTICK_LEFT; // Joystick is pushed left
  }
  else if (xDiff > X_THRESHOLD)
  {
      direction = JOYSTICK_RIGHT; // Joystick is pushed right
  }
  else if (yDiff < -Y_THRESHOLD)
  {
      direction = JOYSTICK_UP; // Joystick is pushed up
  }
  else if (yDiff > Y_THRESHOLD)
  {
      direction = JOYSTICK_DOWN; // Joystick is pushed down
  }
  else
  {
      direction = JOYSTICK_CENTER; // Joystick is centered
  }

  char buffer[50];
  sprintf(buffer, "Direction: %d\r\n", direction);
  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);

  HAL_Delay(100); // Adjust this delay as needed for your application
}

