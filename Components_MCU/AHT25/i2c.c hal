I2C_HandleTypeDef hi2c1; // Global I2C handle

void I2C_Init(void)
{
    // Enable I2C clock
    __HAL_RCC_I2C1_CLK_ENABLE();

    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000; // 100 kHz for standard mode, adjust based on your sensor's specs
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;

    // Initialize I2C peripheral
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    {
        // Error handling
    }
}

HAL_StatusTypeDef I2C_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t data)
{
    uint8_t tx_data[2];

    tx_data[0] = reg_addr; // Register address
    tx_data[1] = data;     // Data to be written

    // Start the I2C communication
    return HAL_I2C_Master_Transmit(&hi2c1, dev_addr, tx_data, 2, HAL_MAX_DELAY);
}

HAL_StatusTypeDef I2C_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data, uint16_t len)
{
    // Send the register address to the device
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, dev_addr, &reg_addr, 1, HAL_MAX_DELAY);

    if (status != HAL_OK)
    {
        return status;
    }


    // Receive data from the device
    return HAL_I2C_Master_Receive(&hi2c1, dev_addr, data, len, HAL_MAX_DELAY);
}

